// generated by codegen, do not edit
/**
 * This module provides the generated definition of `ForTypeRepr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ForBinder
import codeql.rust.elements.TypeRepr
import codeql.rust.elements.internal.TypeReprImpl::Impl as TypeReprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `ForTypeRepr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A type with a higher-ranked `for` modifier. This is currently not valid Rust syntax (`for<...>` can
   * only be applied to traits to form a `TypeBound`).
   *
   * For example:
   * ```rust
   * fn foo(value: for<'a> usize) {}  // DOESN'T COMPILE
   * //            ^^^^^^^^^^^^^
   * ```
   * INTERNAL: Do not reference the `Generated::ForTypeRepr` class directly.
   * Use the subclass `ForTypeRepr`, where the following predicates are available.
   */
  class ForTypeRepr extends Synth::TForTypeRepr, TypeReprImpl::TypeRepr {
    override string getAPrimaryQlClass() { result = "ForTypeRepr" }

    /**
     * Gets the for binder of this for type representation, if it exists.
     */
    ForBinder getForBinder() {
      result =
        Synth::convertForBinderFromRaw(Synth::convertForTypeReprToRaw(this)
              .(Raw::ForTypeRepr)
              .getForBinder())
    }

    /**
     * Holds if `getForBinder()` exists.
     */
    final predicate hasForBinder() { exists(this.getForBinder()) }

    /**
     * Gets the type representation of this for type representation, if it exists.
     */
    TypeRepr getTypeRepr() {
      result =
        Synth::convertTypeReprFromRaw(Synth::convertForTypeReprToRaw(this)
              .(Raw::ForTypeRepr)
              .getTypeRepr())
    }

    /**
     * Holds if `getTypeRepr()` exists.
     */
    final predicate hasTypeRepr() { exists(this.getTypeRepr()) }
  }
}
