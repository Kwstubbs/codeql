// generated by codegen, do not edit
import codeql.rust.elements
import TestUtils

query predicate instances(
  Const x, string hasExtendedCanonicalPath__label, string hasExtendedCanonicalPath,
  string hasCrateOrigin__label, string hasCrateOrigin, string hasAttributeMacroExpansion__label,
  string hasAttributeMacroExpansion, string getNumberOfAttrs__label, int getNumberOfAttrs,
  string hasBody__label, string hasBody, string hasGenericParamList__label,
  string hasGenericParamList, string isConst__label, string isConst, string isDefault__label,
  string isDefault, string hasName__label, string hasName, string hasTypeRepr__label,
  string hasTypeRepr, string hasVisibility__label, string hasVisibility,
  string hasWhereClause__label, string hasWhereClause, string hasImplementation__label,
  string hasImplementation
) {
  toBeTested(x) and
  not x.isUnknown() and
  hasExtendedCanonicalPath__label = "hasExtendedCanonicalPath:" and
  (
    if x.hasExtendedCanonicalPath()
    then hasExtendedCanonicalPath = "yes"
    else hasExtendedCanonicalPath = "no"
  ) and
  hasCrateOrigin__label = "hasCrateOrigin:" and
  (if x.hasCrateOrigin() then hasCrateOrigin = "yes" else hasCrateOrigin = "no") and
  hasAttributeMacroExpansion__label = "hasAttributeMacroExpansion:" and
  (
    if x.hasAttributeMacroExpansion()
    then hasAttributeMacroExpansion = "yes"
    else hasAttributeMacroExpansion = "no"
  ) and
  getNumberOfAttrs__label = "getNumberOfAttrs:" and
  getNumberOfAttrs = x.getNumberOfAttrs() and
  hasBody__label = "hasBody:" and
  (if x.hasBody() then hasBody = "yes" else hasBody = "no") and
  hasGenericParamList__label = "hasGenericParamList:" and
  (if x.hasGenericParamList() then hasGenericParamList = "yes" else hasGenericParamList = "no") and
  isConst__label = "isConst:" and
  (if x.isConst() then isConst = "yes" else isConst = "no") and
  isDefault__label = "isDefault:" and
  (if x.isDefault() then isDefault = "yes" else isDefault = "no") and
  hasName__label = "hasName:" and
  (if x.hasName() then hasName = "yes" else hasName = "no") and
  hasTypeRepr__label = "hasTypeRepr:" and
  (if x.hasTypeRepr() then hasTypeRepr = "yes" else hasTypeRepr = "no") and
  hasVisibility__label = "hasVisibility:" and
  (if x.hasVisibility() then hasVisibility = "yes" else hasVisibility = "no") and
  hasWhereClause__label = "hasWhereClause:" and
  (if x.hasWhereClause() then hasWhereClause = "yes" else hasWhereClause = "no") and
  hasImplementation__label = "hasImplementation:" and
  if x.hasImplementation() then hasImplementation = "yes" else hasImplementation = "no"
}

query predicate getExtendedCanonicalPath(Const x, string getExtendedCanonicalPath) {
  toBeTested(x) and not x.isUnknown() and getExtendedCanonicalPath = x.getExtendedCanonicalPath()
}

query predicate getCrateOrigin(Const x, string getCrateOrigin) {
  toBeTested(x) and not x.isUnknown() and getCrateOrigin = x.getCrateOrigin()
}

query predicate getAttributeMacroExpansion(Const x, MacroItems getAttributeMacroExpansion) {
  toBeTested(x) and
  not x.isUnknown() and
  getAttributeMacroExpansion = x.getAttributeMacroExpansion()
}

query predicate getAttr(Const x, int index, Attr getAttr) {
  toBeTested(x) and not x.isUnknown() and getAttr = x.getAttr(index)
}

query predicate getBody(Const x, Expr getBody) {
  toBeTested(x) and not x.isUnknown() and getBody = x.getBody()
}

query predicate getGenericParamList(Const x, GenericParamList getGenericParamList) {
  toBeTested(x) and not x.isUnknown() and getGenericParamList = x.getGenericParamList()
}

query predicate getName(Const x, Name getName) {
  toBeTested(x) and not x.isUnknown() and getName = x.getName()
}

query predicate getTypeRepr(Const x, TypeRepr getTypeRepr) {
  toBeTested(x) and not x.isUnknown() and getTypeRepr = x.getTypeRepr()
}

query predicate getVisibility(Const x, Visibility getVisibility) {
  toBeTested(x) and not x.isUnknown() and getVisibility = x.getVisibility()
}

query predicate getWhereClause(Const x, WhereClause getWhereClause) {
  toBeTested(x) and not x.isUnknown() and getWhereClause = x.getWhereClause()
}
