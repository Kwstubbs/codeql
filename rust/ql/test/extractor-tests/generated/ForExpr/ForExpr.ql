// generated by codegen, do not edit
import codeql.rust.elements
import TestUtils

query predicate instances(
  ForExpr x, string hasLabel__label, string hasLabel, string hasLoopBody__label, string hasLoopBody,
  string getNumberOfAttrs__label, int getNumberOfAttrs, string hasIterable__label,
  string hasIterable, string hasPat__label, string hasPat
) {
  toBeTested(x) and
  not x.isUnknown() and
  hasLabel__label = "hasLabel:" and
  (if x.hasLabel() then hasLabel = "yes" else hasLabel = "no") and
  hasLoopBody__label = "hasLoopBody:" and
  (if x.hasLoopBody() then hasLoopBody = "yes" else hasLoopBody = "no") and
  getNumberOfAttrs__label = "getNumberOfAttrs:" and
  getNumberOfAttrs = x.getNumberOfAttrs() and
  hasIterable__label = "hasIterable:" and
  (if x.hasIterable() then hasIterable = "yes" else hasIterable = "no") and
  hasPat__label = "hasPat:" and
  if x.hasPat() then hasPat = "yes" else hasPat = "no"
}

query predicate getLabel(ForExpr x, Label getLabel) {
  toBeTested(x) and not x.isUnknown() and getLabel = x.getLabel()
}

query predicate getLoopBody(ForExpr x, BlockExpr getLoopBody) {
  toBeTested(x) and not x.isUnknown() and getLoopBody = x.getLoopBody()
}

query predicate getAttr(ForExpr x, int index, Attr getAttr) {
  toBeTested(x) and not x.isUnknown() and getAttr = x.getAttr(index)
}

query predicate getIterable(ForExpr x, Expr getIterable) {
  toBeTested(x) and not x.isUnknown() and getIterable = x.getIterable()
}

query predicate getPat(ForExpr x, Pat getPat) {
  toBeTested(x) and not x.isUnknown() and getPat = x.getPat()
}
